// Referrence https://github.com/skyv26/Cplusplus-Programming-Challenges

#include <fcntl.h> 				//header file
#include <cstring>				//header file
#include <cstdlib>				//header file
#include <sstream>				//header file
#include <unistd.h>				//header file
#include <termios.h>				//header file
#include <iostream>				//header file
#include <stdio.h>				//header file
#include <stdlib.h>				//header file
#include <fstream>				//header file
#include <vector>				//header file

using namespace std;

class Uart{					// class 
    private:
        string portname;  			// private string variable
        size_t baud_rate;			// private variable used for size
        int    file_descriptor;			// int variable private variable
        int    byte_counter;			// int variable byte counter

    public:
        Uart(string portname, size_t baud_rate){	// function with 2 variables
            this->portname=portname;			// setting portname
            this->baud_rate=baud_rate;			// setting baud rate
            this->file_descriptor=open(this->portname.c_str(), O_RDWR);  
            
            if(this->file_descriptor<0){    				 // checking if port is availbel
                cout<<"Port is Busy or Can't open for communication !!"; //printing outputif not available
                exit(0);						//exit
            } else {
                cout<<"Connection Succeed!!"<<endl;			// printing output if port is available
            }

            struct termios options;				// structure variable named termios

          tcgetattr(this->file_descriptor, &options);
            options.c_cflag &= ~PARENB; // Clear parity bit, disabling parity (most common)
            options.c_cflag &= ~CSTOPB; // Clear stop field, only one stop bit used in communication (most common)
            options.c_cflag &= ~CSIZE; // Clear all bits that set the data size 
            options.c_cflag |= CS8; // 8 bits per byte (most common)
            options.c_cflag &= ~CRTSCTS; // Disable RTS/CTS hardware flow control (most common)
            options.c_cflag |= CREAD | CLOCAL; // Turn on READ & ignore ctrl lines (CLOCAL = 1)

            options.c_lflag &= ~ICANON;
            options.c_lflag &= ~ECHO; // Disable echo
            options.c_lflag &= ~ECHOE; // Disable erasure
            options.c_lflag &= ~ECHONL; // Disable new-line echo
            options.c_lflag &= ~ISIG; // Disable interpretation of INTR, QUIT and SUSP
            options.c_iflag &= ~(IXON | IXOFF | IXANY); // Turn off s/w flow ctrl
            options.c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL); // Disable any special handling of received bytes

            options.c_oflag &= ~OPOST; // Prevent special interpretation of output bytes (e.g. newline chars)
            options.c_oflag &= ~ONLCR; // Prevent conversion of newline to carriage return/line feed
            // tty.c_oflag &= ~OXTABS; // Prevent conversion of tabs to spaces (NOT PRESENT ON LINUX)
            // tty.c_oflag &= ~ONOEOT; // Prevent removal of C-d chars (0x004) in output (NOT PRESENT ON LINUX)

            options.c_cc[VTIME] = 5;    // Wait for up to 1s (10 deciseconds), returning as soon as any data is received.
            options.c_cc[VMIN] = 0;

            // Set in/out baud rate to be 9600
            cfsetispeed(&options, this->baud_rate);
            cfsetospeed(&options, this->baud_rate);
            // options.c_cflag = this->baud_rate | CS8 | CREAD | CLOCAL;
            // options.c_cflag &= ~CRTSCTS;
            // options.c_iflag = IGNPAR | ICRNL;
            // options.c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL);
            // options.c_oflag &= ~OPOST;
            // options.c_oflag &= ~ONLCR;

            tcsetattr(this->file_descriptor, TCSANOW, &options);

        }
        ~Uart(){
            close(this->file_descriptor);
            cout<<"Connection Closed !!"<<endl;
        }

        string readline(){
            char recieve[500];        // Character array declaration with size 500      
            char* data=(char *)"\r";      // Converting Carriage Return to Character Pointer
            memset(&recieve, '\r', sizeof(recieve));  //Take string and store into buffer
            int array_size=sizeof(recieve) / sizeof(char);    // Calculate actual string size
            this->byte_counter=read(this->file_descriptor, &recieve, sizeof(recieve)); // Read buffer and return status
            if(this->byte_counter>0){
                data = (char *) malloc(this->byte_counter*sizeof(char));  // Dynamic memory Allocation
                data=recieve;
                return data;
            }
            string temp(data);
            return temp;
      }

      void writeData(string text){
          int count=0;
	  const char * ch=text.c_str();             // Convert C++ string to C style string (character pointer)
	  count=write(this->file_descriptor, ch, strlen(ch));  // Write Command to our UART device and return status 0 or -1
          if(count<0){
              cout<<"Error Occured !!";
              exit(0);
          }
      }
};


int main(int argc, char **argv){
    Uart gsm("/dev/ttyUSB0",B115200);  //Initalize and Declare Parameterized Constructor Variable (gsm) of class Uart
    int option;
    string ph,data,msg;
    while(1){                               //Infinite Loop
      cout<<"Please select an option \n";
      cout<<"1. Call"<<endl;
      cout<<"2. SMS"<<endl;
      cout<<"Enter choice : ";
      cin>>option;                        // User Input 
      
      switch(option){                           // Switch Flow Control
	  case 1: {cout<<"Enter phone number : ";
		  cin>>ph;
		  data="ATD"+ph+";\r";                  // String AT Command concatenation with user mobile number for calling 
		  cout<<data<<endl;
		  gsm.writeData(data);                  // Send commands to our GSM module
		  for(int i=0; i<5; i++){
		    cout<<gsm.readline()<<endl;         // Read and print output comes from GSM Module with respect to whatever command we send to GSM
		  system("sleep 1");                    // Delay for 1 seconds using system command
		  }
	  break;}
	  case 2: {
	          cout<<"Enter phone number : ";
		  cin>>ph;
		  cin.ignore();                       
		  cout<<"Type your message : ";
		  getline(cin, msg);                       // It is string userinput to take string with whitespaces from user
		  gsm.writeData("AT+CMGF=1\r"); // Configuring TEXT mode
		  cout<<"Text Mode Enabled"<<flush<<endl;
		  sleep(3);                            // Delay for 3 seconds using library function sleep.
		  cout<<gsm.readline()<<flush<<endl; // Read and print output comes from GSM Module with respect to whatever command we send to GSM
		  data="AT+CMGS=\""+ph+"\""+'\r';      // String AT Command concatenation with user mobile number for SMS
		  gsm.writeData(data);                  // Send commands to our GSM module
		  sleep(3);                         // Delay for 3 seconds using library function sleep.
		  cout<<gsm.readline()<<endl;      // Read and print output comes from GSM Module with respect to whatever command we send to GSM
		  gsm.writeData(msg+(char)26);   // Send commands to our GSM module
		  sleep(3);                        // Delay for 3 seconds using library function sleep.
		  cout<<gsm.readline()<<flush<<endl; // Read and print output comes from GSM Module with respect to whatever command we send to GSM
		  for(int i=0; i<5; i++){
		  cout<<gsm.readline()<<flush<<endl; // Read and print output comes from GSM Module with respect to whatever command we send to GSM
		  sleep(2);                          // Delay for 2 seconds using library function sleep.
	 	 }
		  cout<<"message sentâ€¦";
		  
	  break;
	  }
	  default: cout<<"Invalid Option!"<<endl;
	  
      }
    }
    return 0;
}
