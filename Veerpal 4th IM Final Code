#include <wiringPi.h>
#include <wiringPiI2C.h>
#include <iostream>
#include <wiringSerial.h>
#include <pthread.h>
#include <unistd.h>
#include <fcntl.h> //read and write function for UART 
#include <cstdlib>  // use function for C-styled string to maipulate data
#include <sstream> // use for converting float, int --> String or vice versa
#include <termios.h> // use for UART communication
#include <stdio.h> // use for C input and output function
#include <stdlib.h> // use for The stdlib.h header defines four variable types, several macros, and various functions for performing general functions.
#include <fstream> // use for file handling to read and write from Path
#include <vector> // use for standard library like to implement List, dict and in C++
#include <cstring>
#include <errno.h>

#include "DS18B20.h"
#include <sched.h>  // Scheduling library for prioritization of threads


#define PULL_UP "pu"
#define PULL_DOWN "pd"

#define IN "ip"
#define OUT "op"

#define BUZZER 21
#define PANIC_BUTTON 20

#define pressed 0
#define released 1

using namespace std;

bool panic_detect=false;
int serial_port;
double tempNow;
string gps_addr="/dev/ttyAMA1",BPM="",NG_ROK="https://65dd5b609aa4.ngrok.io", gsm_addr="/dev/ttyUSB0", arduino="/dev/ttyACM0";
bool fall_msg=false;
bool recieve_adxl=false;
int sentTime=2;
long double latitude=31.12353929518458,longitude=74.44240699567881; // variable declaration
string careTaker="+14379880527";
string SMS_FORMAT="";
int Temperature=24;
char w1_address[16]="28-0120267e7e7c";
DS18B20 w1Device1 (w1_address);
char dat;
int fd;
int button_count=1;
char buf[6] = {0};
int x,y,z;

bool xdir = false;
bool ydir = false;
bool zdir = false;

class Uart{  //This is our class for UART communication
    private:
        string portname;
        size_t baud_rate;
        int    file_descriptor;
        int    byte_counter;

    public:
        Uart(string portname, size_t baud_rate){ //It is a constructor
            this->portname=portname;
            this->baud_rate=baud_rate;
            this->file_descriptor=open(this->portname.c_str(), O_RDWR);
            
            if(this->file_descriptor<0){
                cout<<"Port is Busy or Can't open for communication !!";
                exit(0);
            } else {
                cout<<"Connection Succeed!!"<<endl;
            }

            struct termios options;

            tcgetattr(this->file_descriptor, &options);
            options.c_cflag &= ~PARENB; // Clear parity bit, disabling parity (most common)
            options.c_cflag &= ~CSTOPB; // Clear stop field, only one stop bit used in communication (most common)
            options.c_cflag &= ~CSIZE; // Clear all bits that set the data size 
            options.c_cflag |= CS8; // 8 bits per byte (most common)
            options.c_cflag &= ~CRTSCTS; // Disable RTS/CTS hardware flow control (most common)
            options.c_cflag |= CREAD | CLOCAL; // Turn on READ & ignore ctrl lines (CLOCAL = 1)

            options.c_lflag &= ~ICANON;
            options.c_lflag &= ~ECHO; // Disable echo
            options.c_lflag &= ~ECHOE; // Disable erasure
            options.c_lflag &= ~ECHONL; // Disable new-line echo
            options.c_lflag &= ~ISIG; // Disable interpretation of INTR, QUIT and SUSP
            options.c_iflag &= ~(IXON | IXOFF | IXANY); // Turn off s/w flow ctrl
            options.c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL); // Disable any special handling of received bytes

            options.c_oflag &= ~OPOST; // Prevent special interpretation of output bytes (e.g. newline chars)
            options.c_oflag &= ~ONLCR; // Prevent conversion of newline to carriage return/line feed
            // tty.c_oflag &= ~OXTABS; // Prevent conversion of tabs to spaces (NOT PRESENT ON LINUX)
            // tty.c_oflag &= ~ONOEOT; // Prevent removal of C-d chars (0x004) in output (NOT PRESENT ON LINUX)

            options.c_cc[VTIME] = 5;    // Wait for up to 1s (10 deciseconds), returning as soon as any data is received.
            options.c_cc[VMIN] = 0;

            // Set in/out baud rate to be 9600
            cfsetispeed(&options, this->baud_rate);
            cfsetospeed(&options, this->baud_rate);
            // options.c_cflag = this->baud_rate | CS8 | CREAD | CLOCAL;
            // options.c_cflag &= ~CRTSCTS;
            // options.c_iflag = IGNPAR | ICRNL;
            // options.c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL);
            // options.c_oflag &= ~OPOST;
            // options.c_oflag &= ~ONLCR;

            tcsetattr(this->file_descriptor, TCSANOW, &options);

        }
        ~Uart(){   //It is Destructor
            close(this->file_descriptor);
            cout<<"Connection Closed !!"<<endl;
        }
        
        long double coordinate(long int val){ // This function will convert a int value coming from GPS data as string to Exact coordinates of our location
            int header;
            header=(val/10000000); //4300-4342.00742
            return (long double)header+((long double)val/100000-(long double)(header*100))/60;
         }

         long double raw_data_to_coord(string any){
           /* This function will convert a string into integer and with the
            * help of coordinate function whatever float value return by
            * function will further return to that place where it is called.
            * 
           */
            string convert="";
            int returnInt=0;
            for(char a:any){
               if(a!='.')
               convert+=a;
            }
            stringstream intVal(convert);
            intVal >> returnInt;
            return coordinate(returnInt);
         }

        string gpsRead(){ // It is used for UART read data
            char recieve[3500];
            char* data;
            memset(&recieve, '\0', sizeof(recieve) );
            int array_size=sizeof(recieve) / sizeof(char);
            this->byte_counter=read(this->file_descriptor, &recieve,sizeof(recieve) );
            if(this->byte_counter>0){
                data = (char *) malloc(this->byte_counter*sizeof(char));
                data=recieve;
                return data;
            }
            string temp(data);
            return temp;
      }
      
      string gsmRead(){
            char recieve[500];
            char* data=(char *)"\r";
            memset(&recieve, '\r', sizeof(recieve));
            int array_size=sizeof(recieve) / sizeof(char);
            this->byte_counter=read(this->file_descriptor, &recieve, sizeof(recieve));
            if(this->byte_counter>0){
                data = (char *) malloc(this->byte_counter*sizeof(char));
                data=recieve;
                return data;
            }
            string temp(data);
            return temp;
      }
      string pulseRead(){
            char recieve[5];
            char* data=(char *)"\0";
            memset(&recieve, '\0', sizeof(recieve));
            int array_size=sizeof(recieve) / sizeof(char);
            this->byte_counter=read(this->file_descriptor, &recieve, sizeof(recieve));
            if(this->byte_counter>0){
                data = (char *) malloc(this->byte_counter*sizeof(char));
                data=recieve;
                return data;
            }
            string temp(data);
            return temp;  
      }
      void writeData(string text){ 
	// It is for writing data to UART device like GPS, GSM
         int count=0;
         const char * ch=text.c_str();
         count=write(this->file_descriptor, ch, strlen(ch));
          if(count<0){
              cout<<"Error Occured !!";
              exit(0);
          }
      }
      
};
Uart gsm(gsm_addr,B115200);
Uart pulse(arduino,B9600);

  
///////////////////////////////////////////////////////////////////////////
/* GPS function event */

void myGPSEvent(){
    // sleep(5);
    int count=0;
    Uart gps(gps_addr,B9600); 
    string loc[4]; // String array with size 4
    char *arr; // character pointer

    string data, extracted_data="";
    while(1){
      ++count;
      data=gps.gpsRead();  // data read and store into variable. 
      extracted_data+=data; // character into extracted+data 
      if(count>2){
	    break;
      }
    }
    data="";
    cout<<extracted_data<<endl;
    for(int i=19; i<strlen(extracted_data.c_str()); i++){
      /* filter data to slice string to desired format */
      data+=extracted_data[i];
    }
    count=0;
    for(int i=0; i<4; i++) //initially all array index set to ""
      loc[i]="";
      
    for(int i=0; i<strlen(data.c_str()); i++){ /* 
      filter data and store coordinates and direction to array
      * */
       if(data[i] ==','){
	 count++;
       }
       else{
	 loc[count]+=data[i];
       }
       if(count>4){
	 break;
       }
    }
    
    for(int i=0; i<4; i++){ // convert index value according to direction
      if(loc[i]=="N"){
	loc[i]="1";
      }
      else if(loc[i]=="W"){
	loc[i]="-1";
      }
      else if(loc[i]=="S"){
	loc[i]="-1";
      }
      else if(loc[i]=="E"){
	loc[i]="1";
      }
    }
    
    
    latitude=gps.raw_data_to_coord(loc[0]) * atoi(loc[1].c_str());   
    /* Latitude -- coming from function  */
    longitude=gps.raw_data_to_coord(loc[2]) * atoi(loc[3].c_str());  
    /* Longitude -- coming from function */
    
    /* atoi ---> convert string to int  */
  
    printf("\nLatitude: %lf\nLongtitude: %lf\n\n",latitude,longitude);
}


void *pulseRateEvent(void *arg){
   BPM="";
   for(int i=0; i<3; i++){
   if(serialDataAvail (serial_port))
   { 
		dat = serialGetchar (serial_port);		/* receive character serially*/	
		BPM+=to_string(int(dat)-48);
		fflush (stdout) ;
   }
}
cout<<"  [ BPM: "<<BPM<<" ]"<<endl;
   //string data;
   //int pulse=0;
   //BPM="";
   //data=object->pulseRead();
   //sleep(0.1);
   //cout<<data<<flush<<endl;
   //if(strlen(data.c_str())<=3)
   //{ 
      //BPM=data;
   //}
   return 0;
}

void sms(){
   string data;
   SMS_FORMAT="Help! Me\n\nBPM:"+BPM+"\nTemp: "+to_string(int(tempNow))+" C\nImage: "+NG_ROK+"/capture?_cb=1234"+"\n\n"+"Location: https://maps.google.com/?ll="+to_string(latitude)+","+to_string(longitude);
   gsm.writeData("AT+CMGF=1\r"); // Configuring TEXT mode
   sleep(3);
   data="AT+CMGS=\""+careTaker+"\""+'\r';
   gsm.writeData(data);
   sleep(3);
   gsm.writeData(SMS_FORMAT+(char)26);
   for(int i=0; i<5; i++){ gsm.gsmRead();}
   fall_msg=false;
}

void calling(){
   string data;
   data="ATD"+careTaker+";\r";
   gsm.writeData(data);
   for(int i=0; i<5; i++){myGPSEvent(); gsm.gsmRead();}
   sms();
}


void setMode(int pin_num, string md, string logic="pd"){
   string command;
   if(md==OUT){
      command="raspi-gpio set "+to_string(pin_num)+" "+md;
   }else{
      command="raspi-gpio set "+to_string(pin_num)+" "+md+" "+logic;
   }
   system(command.c_str());
}

void *buttonEvent(void *arg){
   panic_detect=!(digitalRead(PANIC_BUTTON));
   if(panic_detect || recieve_adxl){
      button_count++;
      delay(350);
      recieve_adxl=false;
   }
   if(button_count%2!=0){
      fall_msg=false;
      sentTime=2;
   }else{
      fall_msg=true;
   }
   return 0;
}

void *temperatureEvent(void *arg){
   tempNow = w1Device1.getTemp();
   cout<<"Temperature : "<<int(tempNow)<<" C"<<endl;
   return 0;   
}

///////////////////////////////////////////////////////////////
/* Send signal to ESP32 to capture image (which upload on BLYNK Server) */

void clickMyPic(){
     cout<<"*** Image Captured !! ****"<<endl;
    digitalWrite(25,HIGH);
    delay(500);
    digitalWrite(25,LOW);
    delay(500);
}

void *buzzerEvent(void *arg){
   cout<<button_count<<endl;
   if(fall_msg){
      digitalWrite(BUZZER,LOW);
      if(sentTime>1){
         --sentTime;
         clickMyPic();
         calling();
      }
   }
   else{
      digitalWrite(BUZZER,HIGH);
   }
   return 0;
}


//////////////////////////////////////////////////////////////
/* ADXL read via I2C and assign value to global variables */
void *adxlRead(void *arg)
{
    buf[0] = wiringPiI2CReadReg8(fd, 0x32);
    buf[1] = wiringPiI2CReadReg8(fd, 0x33);

    buf[2] = wiringPiI2CReadReg8(fd, 0x34);
    buf[3] = wiringPiI2CReadReg8(fd, 0x35);

    buf[4] = wiringPiI2CReadReg8(fd, 0x36);
    buf[5] = wiringPiI2CReadReg8(fd, 0x37);

    x = ((int)buf[1] << 8) | (int)buf[0];
    if (x & (1 << 16 - 1))
        x = x - (1 << 16);

    y = ((int)buf[3] << 8) | (int)buf[2];
    if (y & (1 << 16 - 1))
        y = y - (1 << 16);

    z = ((int)buf[5] << 8) | (int)buf[4];
    if (z & (1 << 16 - 1))
        z = z - (1 << 16);

    if (x < 0 && x > -50)
    {
        xdir = true;
    }
    else
    {
        xdir = false;
    }

    if (y > 0 && y < 50)
    {
        ydir = true;
    }
    else
    {
        ydir = false;
    }

    if (xdir && ydir)
    {
        cout << "Person fall down !" << endl;
        button_count=1;
        fall_msg=true;
        recieve_adxl=true;
    }
    else
    {
        cout << "Person in normal posture" << endl;
        // digitalWrite(buzzer, HIGH);
    }
    cout << "ADXL = { x:" << x << "\ty:" << y << "\tz:" << z <<" }"<< endl;
    return 0;
}

int main(){
   fd = wiringPiI2CSetup(0x53);
    if ((serial_port = serialOpen (arduino.c_str(), 9600)) < 0)	/* open serial port */
   {
    fprintf (stderr, "Unable to open serial device: %s\n", strerror (errno)) ;
    return 1 ;
   }
   if (wiringPiSetup () == -1)					/* initializes wiringPi setup */
     {
       fprintf (stdout, "Unable to start wiringPi: %s\n", strerror (errno)) ;
       return 1 ;
     }
   wiringPiSetupGpio();
   setMode(BUZZER,OUT);
   setMode(PANIC_BUTTON,IN,PULL_UP);
   digitalWrite(BUZZER,HIGH);

    pthread_attr_t gps_thread_attr, button_thread_attr, adxl_thread_attr, pulse_thread_attr, temp_thread_attr, buzz_thread_attr;
    pthread_t gps_thread,button_thread, pulse_thread, adxl_thread, temp_thread, buzz_thread;

    /* Scheduling parameter declaration */
    sched_param param1,param2,param3,param4,param5, param6;

    /* Thread attribute initialization */
    pthread_attr_init (&button_thread_attr);
    pthread_attr_init (&adxl_thread_attr);
    pthread_attr_init (&pulse_thread_attr);
    pthread_attr_init (&temp_thread_attr);
    pthread_attr_init (&buzz_thread_attr);
    // pthread_attr_init (&gps_thread_attr);



    /* Get default thread parameter and copy to variable address */
    pthread_attr_getschedparam (&button_thread_attr, &param1);
    pthread_attr_getschedparam (&adxl_thread_attr, &param2);
    pthread_attr_getschedparam (&pulse_thread_attr, &param3);
    pthread_attr_getschedparam (&temp_thread_attr, &param4);
    pthread_attr_getschedparam (&buzz_thread_attr, &param5);
    // pthread_attr_getschedparam (&gps_thread_attr, &param6);


    /* Set priority for scheduling task one after another and change default parameters to custom */

    /* if default priority = 350 then it will set to whatever number we declare */
    param1.sched_priority = 1;
    pthread_attr_setschedparam (&button_thread_attr, &param1);

    param2.sched_priority = 2;
    pthread_attr_setschedparam (&adxl_thread_attr, &param2);

    param3.sched_priority = 3;
    pthread_attr_setschedparam (&pulse_thread_attr, &param3);

    param4.sched_priority = 4;
    pthread_attr_setschedparam (&temp_thread_attr, &param4);

    param5.sched_priority = 5;
    pthread_attr_setschedparam (&buzz_thread_attr, &param5);

    // param6.sched_priority = 6;
    // pthread_attr_setschedparam (&gps_thread_attr, &param6);

    /* Infinite Loop */
    while (1) {
        pthread_create(&button_thread, &button_thread_attr, &buttonEvent, NULL);
        pthread_create(&adxl_thread, &adxl_thread_attr, &adxlRead, NULL);
        pthread_create(&pulse_thread, &pulse_thread_attr, &pulseRateEvent, NULL);
        pthread_create(&temp_thread, &temp_thread_attr, &temperatureEvent, NULL);
        pthread_create(&buzz_thread, &buzz_thread_attr, &buzzerEvent, NULL);
        // pthread_create(&gps_thread, &gps_thread_attr, &myGPSEvent, NULL);


        pthread_join(button_thread, NULL);
        pthread_join(adxl_thread, NULL);
        pthread_join(pulse_thread, NULL);
        pthread_join(temp_thread, NULL);
        pthread_join(buzz_thread, NULL);


        sleep(2);
    }

//    while(1){
//       BPM="";
//       myGPSEvent();
//       thread th1(buttonEvent);
//       thread th2(buzzerEvent,&gsm);
//       thread th3(adxlRead,&gsm);
//       thread th4(pulseRateEvent,serial_port);
//       thread th5(temperatureEvent);
//       th1.join();
//       th2.join();
//       th3.join();
//       th4.join();
//       th5.join();
//       fall_msg=false;
//    }
   
   return 0;
}
